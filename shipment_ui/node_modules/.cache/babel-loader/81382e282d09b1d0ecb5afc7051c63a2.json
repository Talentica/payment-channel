{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/git/Shipment/shipment_ui/src/AboutPage.js\";\nimport React from \"react\";\n\nclass AboutPage extends React.Component {\n  // componentDidMount() {\n  // }\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"This is a payment channel proof of concept DApp.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Alice can establish open a duplex channel on-chain with Bob by using \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Create Channel\")), \".\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Bob can join a channel established by Alice by using \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Confirm Channel\")), \" (bob needs to act before timeout).\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"After channel confirmation, Alice and Bob can pay each other off chain.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Fund state is secured by smart contract.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"In Case of conflict or withdrawal,  Users can \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Close Channel\")), \" at any time.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"In case of no coordination with the other party, after finalization period users can safely withdraw using \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Finalize Close\")), \".\")))));\n  }\n\n}\n\nexport default AboutPage;\n/*\nlocal storage management\n\nlast fetched block(on chain ethereum block) ->\n    let key = this.state.sender + '_last_fetched_block'\n\nactive channel id ->\n    let key = this.state.sender + 'active_channel_ids'\n\nwaiting channel id ->\n    let key = this.state.sender + 'waiting_channel_ids'\n\nlast signed state ->\n    let key = this.state.sender + <channel_id> + '_last_signed_state'\n\n    add contract_address when possible\n    because it can be exploitted between different instance of this contract\n    state structure -> Channel_id(number), Count(number), Alice_Cash(number), Bob_Cash(number), Signature(string wiht 0x)\n    local storage -> all values will be concat using '_'\nUser dataBase ->\n  let key = user_accounts\n\nAll latest update made by the application list\n  all event by handler, state requested and state response are  added by all respective actions\n  and can be deleted by the <sender> only in local storage\n  just for information kind of list\n    let key = this.state.sender + '_updates'\n    */","map":{"version":3,"sources":["/home/gaurava/work/git/Shipment/shipment_ui/src/AboutPage.js"],"names":["React","AboutPage","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AAEtC;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP,WACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFAAyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,CAAzE,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAAyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAH,CAAzD,wCAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAH,CAAlD,kBALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHAA+G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,CAA/G,MANF,CADF,CADF,CAFF,CADF;AAkBD;;AAxBqC;;AA2BxC,eAAeF,SAAf;AAEA","sourcesContent":["import React from \"react\";\n\nclass AboutPage extends React.Component {\n\n  // componentDidMount() {\n  // }\n\n  render() {\n    return (\n      <>\n        <h2>This is a payment channel proof of concept DApp.</h2>\n        <div>\n          <p>\n            <ul>\n              <li>Alice can establish open a duplex channel on-chain with Bob by using <b><i>Create Channel</i></b>.</li>\n              <li>Bob can join a channel established by Alice by using <b><i>Confirm Channel</i></b> (bob needs to act before timeout).</li>\n              <li>After channel confirmation, Alice and Bob can pay each other off chain.</li>\n              <li>Fund state is secured by smart contract.</li>\n              <li>In Case of conflict or withdrawal,  Users can <b><i>Close Channel</i></b> at any time.</li>\n              <li>In case of no coordination with the other party, after finalization period users can safely withdraw using <b><i>Finalize Close</i></b>.</li>\n            </ul>\n          </p>\n        </div>\n\n      </>\n    );\n  }\n}\n\nexport default AboutPage;\n\n/*\nlocal storage management\n\nlast fetched block(on chain ethereum block) ->\n    let key = this.state.sender + '_last_fetched_block'\n\nactive channel id ->\n    let key = this.state.sender + 'active_channel_ids'\n\nwaiting channel id ->\n    let key = this.state.sender + 'waiting_channel_ids'\n\nlast signed state ->\n    let key = this.state.sender + <channel_id> + '_last_signed_state'\n\n    add contract_address when possible\n    because it can be exploitted between different instance of this contract\n    state structure -> Channel_id(number), Count(number), Alice_Cash(number), Bob_Cash(number), Signature(string wiht 0x)\n    local storage -> all values will be concat using '_'\nUser dataBase ->\n  let key = user_accounts\n\nAll latest update made by the application list\n  all event by handler, state requested and state response are  added by all respective actions\n  and can be deleted by the <sender> only in local storage\n  just for information kind of list\n    let key = this.state.sender + '_updates'\n    */\n"]},"metadata":{},"sourceType":"module"}